openapi: 3.1.0
info:
  title: Pentaho Scheduler API
  version: 1.0.0
  description: REST API for managing scheduled jobs and blockouts in Pentaho.

servers:
  - url: http://localhost:8080/pentaho/plugin
tags:
  - name: i-scheduler
    description: Scheduler operations
paths:
  /api/v1/scheduler/jobs:
    post:
      summary: Create a scheduled job
      operationId: createJobSchedule
      tags:
        - i-scheduler
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/BaseJob"
          application/json:
            schema:
              $ref: "#/components/schemas/BaseJob"
      responses:
        "200":
          description: Schedule created successfully
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: User is not authorized to create schedules
        "403":
          description: Cannot create schedules for the specified file
        "500":
          description: An error occurred while creating a schedule
    get:
      summary: Retrieve all scheduled jobs visible to the current user
      operationId: getAllScheduledJobs
      tags:
        - i-scheduler
      responses:
        "200":
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseJob"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseJob"
        "500":
          description: Error while retrieving jobs
    delete:
      summary: Delete multiple scheduled jobs
      operationId: deleteMultipleScheduledJobs
      tags:
        - i-scheduler
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: array
              items:
                type: string
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Jobs deleted successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobStatusResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobStatusResponse"
        "500":
          description: Invalid request or server error
  /api/v1/scheduler/jobs/{jobId}:
    get:
      summary: Return the information for a specified job
      operationId: getScheduledJobById
      tags:
        - i-scheduler
      parameters:
        - in: path
          name: jobId
          schema: { type: string }
          required: true
        - in: query
          name: asCronString
          schema: { type: string }
          required: false
      responses:
        "200":
          description: Job info retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseJob"
            application/xml:
              schema:
                $ref: "#/components/schemas/BaseJob"
        "204":
          description: Job does not exist
        "500":
          description: Internal error or invalid jobId
    put:
      summary: Update a scheduled job
      operationId: updateScheduledJob
      tags:
        - i-scheduler
      parameters:
        - in: path
          name: jobId
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/BaseJob"
          application/json:
            schema:
              $ref: "#/components/schemas/BaseJob"
      responses:
        "200":
          description: Schedule updated successfully
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: User is not authorized to update schedules
        "403":
          description: Cannot update schedules for the specified file
        "500":
          description: An error occurred while updating a schedule
    delete:
      summary: Delete the specified scheduled job
      operationId: deleteScheduledJobById
      tags:
        - i-scheduler
      parameters:
        - in: path
          name: jobId
          schema: { type: string }
          required: true
      responses:
        "200":
          description: Job removed
          content:
            text/plain:
              schema: { type: string }
        "500":
          description: Invalid jobId
  /api/v1/scheduler/jobs/{jobId}/trigger:
    post:
      summary: Execute a previously scheduled job
      operationId: triggerScheduledJob
      tags:
        - i-scheduler
      parameters:
        - in: path
          name: jobId
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/xml:
            schema: { type: string }
          application/json:
            schema: { type: string }
      responses:
        "200":
          description: Job triggered successfully
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Invalid input
        "500":
          description: Invalid jobId
  /api/v1/scheduler/jobs/{jobId}/state:
    get:
      summary: Checks the state of the selected scheduled job
      operationId: getScheduledJobState
      tags:
        - i-scheduler
      parameters:
        - in: path
          name: jobId
          schema: { type: string }
          required: true
      responses:
        "200":
          description: Job state retrieved
          content:
            text/plain:
              schema: { type: string }
        "500":
          description: Invalid jobId
  /api/v1/scheduler/jobs/{jobId}/pause:
    post:
      summary: Pause the specified scheduled job
      operationId: pauseScheduledJob
      tags:
        - i-scheduler
      parameters:
        - in: path
          name: jobId
          schema: { type: string }
          required: true
      responses:
        "200":
          description: Job paused
          content:
            text/plain:
              schema: { type: string }
        "500":
          description: Invalid jobId
  /api/v1/scheduler/jobs/{jobId}/resume:
    post:
      summary: Resume the specified scheduled job
      operationId: resumeScheduledJob
      tags:
        - i-scheduler
      parameters:
        - in: path
          name: jobId
          schema: { type: string }
          required: true
      responses:
        "200":
          description: Job resumed
          content:
            text/plain:
              schema: { type: string }
        "500":
          description: Invalid jobId
  /api/v1/scheduler/content-cleaner-job:
    get:
      summary: Get the scheduled job for deleting generated files
      operationId: getContentCleanerJob
      tags:
        - i-scheduler
      responses:
        "200":
          description: Content cleaner job successfully retrieved
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/BaseJob"
            application/json:
              schema:
                $ref: "#/components/schemas/BaseJob"
        "204":
          description: No content cleaner job exists
  /api/v1/scheduler/state:
    get:
      summary: Returns the state of the scheduler
      operationId: getSchedulerState
      tags:
        - i-scheduler
      responses:
        "200":
          description: Scheduler state retrieved
          content:
            text/plain:
              schema: { type: string }
        "500":
          description: Error getting scheduler state
    post:
      summary: Change the state of the scheduler (start, pause, shutdown)
      operationId: setSchedulerState
      tags:
        - i-scheduler
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  enum: [running, paused, shutdown]
      responses:
        "200":
          description: Scheduler state updated
          content:
            text/plain:
              schema: { type: string }
        "500":
          description: Error updating scheduler state
  /api/v1/scheduler/jobs/schedule-allowed:
    get:
      summary: Checks whether the current user may schedule a repository file
      operationId: isScheduleAllowedForFile
      tags:
        - i-scheduler
      parameters:
        - in: query
          name: id
          schema: { type: string }
          required: true
      responses:
        "200":
          description: Scheduling ability retrieved
          content:
            text/plain:
              schema: { type: string }
        "500":
          description: Invalid repository file id
  /api/v1/scheduler/jobs/can-schedule:
    get:
      summary: Checks whether the current user can schedule any content
      operationId: canUserScheduleAnyContent
      tags:
        - i-scheduler
      responses:
        "200":
          description: Scheduling permission retrieved
          content:
            application/json:
              schema: { type: string }
        "500":
          description: Unable to retrieve the scheduling permission
  /api/v1/scheduler/jobs/can-execute:
    get:
      summary: Checks whether the current user can execute schedules
      operationId: canUserExecuteSchedules
      tags:
        - i-scheduler
      responses:
        "200":
          description: Scheduling execution permission retrieved
          content:
            application/json:
              schema: { type: string }
        "500":
          description: Unable to retrieve the scheduling permission
  /api/v1/scheduler/jobs/{jobId}/generated-content:
    get:
      summary: Retrieve the list of execute content by job id
      operationId: getGeneratedContentByJobId
      tags:
        - i-scheduler
      parameters:
        - in: path
          name: jobId
          schema: { type: string }
          required: true
      responses:
        "200":
          description: Generated content for schedule
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/RepositoryFileDto" }
            application/xml:
              schema:
                type: array
                items: { $ref: "#/components/schemas/RepositoryFileDto" }
  /api/v1/scheduler/blockouts:
    get:
      summary: Get all the blockout jobs in the system
      operationId: getAllBlockoutJobs
      tags:
        - i-scheduler
      responses:
        "200":
          description: Blockout jobs retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseJob"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseJob"
        "500":
          description: Error while retrieving blockout jobs
    post:
      summary: Creates a new blockout for scheduled jobs
      operationId: createBlockoutJob
      tags:
        - i-scheduler
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/BaseJob"
          application/json:
            schema:
              $ref: "#/components/schemas/BaseJob"
      responses:
        "200":
          description: Blockout created
          content:
            text/plain:
              schema: { type: string }
        "401":
          description: Not authorized
  /api/v1/scheduler/blockouts/exists:
    get:
      summary: Checks if there are blockouts in the system
      operationId: blockoutsExist
      tags:
        - i-scheduler
      responses:
        "200":
          description: Blockout status
          content:
            text/plain:
              schema: { type: string }
  /api/v1/scheduler/blockouts/will-fire:
    post:
      summary: Checks if the selected blockout schedule will be fired
      operationId: willBlockoutFire
      tags:
        - i-scheduler
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/BaseJob"
          application/json:
            schema:
              $ref: "#/components/schemas/BaseJob"
      responses:
        "200":
          description: Will fire status
          content:
            text/plain:
              schema: { type: string }
        "500":
          description: Error determining blockout firing
  /api/v1/scheduler/blockouts/should-fire-now:
    get:
      summary: Checks if the selected blockout schedule should be fired now
      operationId: shouldBlockoutFireNow
      tags:
        - i-scheduler
      responses:
        "200":
          description: Should fire now status
          content:
            text/plain:
              schema: { type: string }
  /api/v1/scheduler/blockouts/status:
    post:
      summary: Check the status of the selected blockout schedule
      operationId: getBlockoutStatus
      tags:
        - i-scheduler
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/BaseJob"
          application/json:
            schema:
              $ref: "#/components/schemas/BaseJob"
      responses:
        "200":
          description: Blockout status
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BlockStatusProxy" }
            application/xml:
              schema: { $ref: "#/components/schemas/BlockStatusProxy" }
        "401":
          description: Not authorized
components:
  schemas:
    JobStatusResponse:
      type: object
      properties:
        jobId:
          type: string
        status:
          type: string

    JobParam:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        type:
          type: string

    BaseJob:
      type: object
      discriminator:
        propertyName: uiPassParam
        mapping:
          RUN_ONCE: "#/components/schemas/RunOnceJobScheduleRequest"
          SECONDS: "#/components/schemas/SecondsJobScheduleRequest"
          DAILY: "#/components/schemas/DailyJobScheduleRequest"
          WEEKLY: "#/components/schemas/WeeklyJobScheduleRequest"
          MONTHLY: "#/components/schemas/MonthlyJobScheduleRequest"
          YEARLY: "#/components/schemas/YearlyJobScheduleRequest"
          CRON: "#/components/schemas/CronJobScheduleRequest"
      properties:
        jobId:
          type: string
        jobName:
          type: string
        startDate:
          type: string
          format: date-time
        uiPassParam:
          type: string
          enum:
            - RUN_ONCE
            - SECONDS
            - DAILY
            - WEEKLY
            - MONTHLY
            - YEARLY
            - CRON
        inputFile:
          type: string
        outputFile:
          type: string
          nullable: true
        timeZone:
          type: string
        enableSafeMode:
          type: boolean
        gatheringMetrics:
          type: boolean
        logLevel:
          type: string
        userName:
          type: string
        jobParams:
          type: array
          items:
            $ref: "#/components/schemas/JobParam"
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/JobParam"
        state:
          type: string
          nullable: true
        nextRun:
          type: string
          format: date-time
          nullable: true
        lastRun:
          type: string
          format: date-time
          nullable: true

    RunOnceJobScheduleRequest:
      allOf:
        - $ref: "#/components/schemas/BaseJob"
        - type: object
      type: object

    SecondsJobScheduleRequest:
      allOf:
        - $ref: "#/components/schemas/BaseJob"
        - type: object
      type: object
      properties:
        repeatInterval:
          type: integer

    DailyJobScheduleRequest:
      allOf:
        - $ref: "#/components/schemas/BaseJob"
        - type: object
      type: object
      properties:
        repeatInterval:
          type: integer
        ignoreDST:
          type: boolean
        isEveryNDays:
          type: boolean
        endDate:
          type: string
          format: date-time
          nullable: true

    CronJobScheduleRequest:
      allOf:
        - $ref: "#/components/schemas/BaseJob"
        - type: object
      type: object
      properties:
        cronExpression:
          type: string
        cronDescription:
          type: string
        endDate:
          type: string
          format: date-time
          nullable: true

    WeeklyJobScheduleRequest:
      allOf:
        - $ref: "#/components/schemas/BaseJob"
        - type: object
      type: object
      properties:
        daysOfWeek:
          type: array
          items:
            type: string
            enum:
              - Sunday
              - Monday
              - Tuesday
              - Wednesday
              - Thursday
              - Friday
              - Saturday
        endDate:
          type: string
          format: date-time
          nullable: true

    MonthlyJobScheduleRequest:
      allOf:
        - $ref: "#/components/schemas/BaseJob"
        - type: object
      type: object
      properties:
        dayOfMonth:
          type: integer
        weekOfMonth:
          type: string
          enum:
            - first
            - second
            - third
            - fourth
            - last
        dayOfWeek:
          type: string
          enum:
            - Sunday
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
        endDate:
          type: string
          format: date-time
          nullable: true

    YearlyJobScheduleRequest:
      allOf:
        - $ref: "#/components/schemas/BaseJob"
        - type: object
      type: object
      properties:
        dayOfMonth:
          type: integer
        monthOfYear:
          type: integer
        weekOfMonth:
          type: string
          enum:
            - first
            - second
            - third
            - fourth
            - last
        dayOfWeek:
          type: string
          enum:
            - Sunday
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
        endDate:
          type: string
          format: date-time
          nullable: true

    BlockStatusProxy:
      type: object
      properties:
        partiallyBlocked:
          type: boolean
        totallyBlocked:
          type: boolean

    RepositoryFileDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        path:
          type: string
        title:
          type: string
        createdDate:
          type: integer
        lastModifiedDate:
          type: integer
        fileSize:
          type: integer
        folder:
          type: boolean
        hidden:
          type: boolean
        locked:
          type: boolean
        locale:
          type: string
        versionId:
          type: string
        versioned:
          type: boolean
        originalParentFolderPath:
          type: string
        ownerType:
          type: integer
        localePropertiesMapEntries:
          type: array
          items:
            type: object
